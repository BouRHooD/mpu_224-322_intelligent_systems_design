
from deap import base
from deap import creator
from deap import tools
from deap import algorithms

def oneDijkstraFitness(individual):
    '''
    Функция приспособленности (англ. fitness function)\n
    Механизм оценки приспособленности каждой особи к текущим условиями окружающей среды\n
    Алгоритм Дейкстры: https://python-scripts.com/dijkstras-algorithm
    '''
    # Считаем длину текущего маршрута, используя значения смежной матрицы D
    prev = startV
    best_sum_way = 0
    full_way = individual[:individual.index(endV)+1]
    for next in full_way:
        edge_values = Window.D[prev]
        way_value = edge_values[next]
        best_sum_way += int(way_value)
        prev = next
    return best_sum_way,

# define a single objective, minimizing fitness strategy:
creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
# create the Individual class based on list of integers:
creator.create("Individual", list, fitness=creator.FitnessMin)

toolbox = base.Toolbox()
# create an operator that generates randomly shuffled indices:
toolbox.register("randomOrder", random.sample, range(LENGTH_D), LENGTH_D)
# create the individual creation operator to fill up an Individual instance with shuffled indices:
toolbox.register("individualCreator", tools.initIterate, creator.Individual, toolbox.randomOrder)
# create the population creation operator to generate a list of individuals:
toolbox.register("populationCreator", tools.initRepeat, list, toolbox.individualCreator)
toolbox.register("evaluate", oneDijkstraFitness)


# Genetic operators:
toolbox.register("select", tools.selTournament, tournsize=3)
toolbox.register("mate", tools.cxOrdered)
toolbox.register("mutate", tools.mutShuffleIndexes, indpb=1.0/LENGTH_D)


# create initial population (generation 0):
population = toolbox.populationCreator(n=POPULATION_SIZE)

# prepare the statistics object:
stats = tools.Statistics(lambda ind: ind.fitness.values)
stats.register("min", np.min)
stats.register("avg", np.mean)

# define the hall-of-fame object:
hof = tools.HallOfFame(1)

# perform the Genetic Algorithm flow with hof feature added:
population, logbook = algorithms.eaSimple(population, toolbox, cxpb=P_CROSSOVER, mutpb=P_MUTATION, ngen=MAX_GENERATIONS, stats=stats, halloffame=hof, verbose=True)

# print best individual info:
best = hof.items[0]
print("-- Best Ever Individual = ", best)
print("-- Best Ever Fitness = ", best.fitness.values[0])

# plot statistics:
minFitnessValues, meanFitnessValues = logbook.select("min", "avg")
